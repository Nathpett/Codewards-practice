import math

def hex_string_to_RGB(s): 
    RGB = "rgb"
    HEX = {"A":10, "B":11, "C":12, "D":13, "E":14, "F":15}
    def hex_didget_to_decimal(d):    
        if d in HEX.keys():
            return HEX[d]
        else:
            return int(d)
    s = s.upper()
    r = {}
    for i in range(3):
        color = s[2*i+1:2*i+3]
        color = hex_didget_to_decimal(color[0]) * 16 + hex_didget_to_decimal(color[1])
        r[RGB[i]] = color
    return r
    
def order_weight(s):
    #Weight being the sum of a number's didgets, and then prioritized by alphabetical order
    def get_weight(n):
        w = 0
        sw = 0
        i = 1
        for c in n:
            w += int(c)
            sw += (int(c)+1)/(10**i)
            i += 1
        return (w, sw)
    l = s.split(" ")
    l.sort(key=get_weight)
    return " ".join(l)


def productFib(prod):
    fib = {0:0, 1:1}
    def get_fib(n):
        if n in fib.keys():
            return fib[n]
        new_fib = get_fib(n-1) + get_fib(n-2)
        fib[n] = new_fib
        return new_fib
    
    i = 0
    while get_fib(i) * get_fib(i+1) < prod:
        i += 1
    return [get_fib(i), get_fib(i+1), get_fib(i) * get_fib(i+1) == prod]

# encodes/decodes decimal to str in factorial numbering system
# see https://en.wikipedia.org/wiki/Factorial_number_system
ALP = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
def dec_2_fact_string(nb):
    s = ""
    for i in range(36, -1, -1):
        cur_didget = 0
        while math.factorial(i) <= nb:
            nb -= math.factorial(i)
            cur_didget += 1
        s += ALP[cur_didget]
    while s[0] == '0':
        s = s [1:] 
    return s

def fact_string_2_dec(s):
    n = 0
    for i in range(0, len(s)):
        c = s[len(s) - (i + 1)]
        n += math.factorial(i) * ALP.index(c)
    return n


def perimeter(n):
    #returns perimeter of all squares of length 0 to n + 1 in the fibonacci sequence
    def get_fib(n):
        #overwrite values to avoid huge memory usuage and recursion depth excess 
        a, b = 0, 1
        while n != 0:
            a, b = a + b, a
            n -= 1
        return a
    return 4 * (get_fib(n + 3) - 1)
