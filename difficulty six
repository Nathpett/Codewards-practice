def high(x):
    #returns word with highest "score", score the sum of a word's characters' index + 1 in the alphabet
    alp = 'abcdefghijklmnopqrstuvwxyz'
    def get_index_score(w):
        score = 0
        for c in w:
            score += alp.index(c) + 1
        return score
    
    champ = 0
    for word in x.split(" "):
        cur_score = get_index_score(word)
        if cur_score > champ:
            champ = cur_score
            champ_word = word
    return champ_word



def dig_pow(n, p):
    #returns k if any, where k is: (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k <abcd... being each didget in n>
    s = 0
    for i, d in enumerate(str(n)):
        d = int(d)
        s += d**(p + i)
    if s % n == 0:
        return s//n
    else:
        return -1


def bishop(start_pos, end_pos, num_moves):
    returns whether a bishop in chess can reach end_pos from start_pos given some number of moves num_moves
    row_l = "12345678"
    col_l = "abcdefgh"

    y, x = start_pos
    y, x = col_l.index(y), row_l.index(x)
    yy, xx = end_pos
    yy, xx = col_l.index(yy), row_l.index(xx)
    return ((x + y) % 2 == (xx + yy) % 2) \
           and ((num_moves == 0 and start_pos == end_pos) \
           or (num_moves == 1 and abs(x - xx) == abs(y - yy)) \
           or (num_moves >= 2))
